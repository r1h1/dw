--CREO TABLA PAIS
CREATE TABLE LA_PAIS (
PAI_ID INT NOT NULL,
PAI_NOMBRE VARCHAR (50) NOT NULL,
CONSTRAINT LA_PAIS PRIMARY KEY (PAI_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_PAIS
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR PAIS
CREATE OR REPLACE PROCEDURE INSERTA_PAIS
(PAI_NOMBRE VARCHAR)
AS 
BEGIN
INSERT INTO INSERTA_PAIS VALUES (AUTOINCREMENTABLE_PAIS.nextval, PAI_NOMBRE VARCHAR);
END;

--PROCEDIMIENTO EDITAR PAIS
CREATE OR REPLACE PROCEDURE EDITAR_PAIS
(PAI_ID IN  INT, PAI_NOMBRE IN VARCHAR)
AS 
BEGIN
update LA_PAIS set PAI_NOMBRE = PAI_NOMBRE where  PAI_ID = PAI_ID ;
END;

--PROCEDURE PARA BORRAR UN PAIS POR ID
CREATE OR REPLACE PROCEDURE DELETE_PAIS
(
    PAI_ID IN INT
)
AS
BEGIN
    DELETE LA_PAIS WHERE PAI_ID = PAI_ID;
END;

EXECUTE INSERTA_PAIS('GUATEMALA')
EXECUTE INSERTA_PAIS('SALVADOR')
EXECUTE INSERTA_PAIS('HONDURAS')
EXECUTE INSERTA_PAIS('COSTA RICA')

EXECUTE EDITAR_PAIS(3, 'MEXICO')

EXECUTE DELETE_PAIS(4)


--CREO TABLA DEPARTAMENTO
CREATE TABLE LA_DEPARTAMENTO (
DEP_ID INT NOT NULL,
DEP_NOMBRE VARCHAR(50) NOT NULL,
PAI_ID INT NOT NULL,
CONSTRAINT LA_DEPARTAMENTO PRIMARY KEY (DEP_ID),
FOREIGN KEY (PAI_ID) REFERENCES  LA_PAIS(PAI_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_DEPARTAMENTO
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR DEPARTAMENTO
CREATE OR REPLACE PROCEDURE INSERTA_DEPARTAMENTO
( DEP_NOMBRE VARCHAR(50), PAI_ID INT )
AS 
BEGIN
INSERT INTO LA_DEPARTAMENTO VALUES (AUTOINCREMENTABLE_DEPARTAMENTO.nextval, DEP_NOMBRE, PAI_ID );
END;

--PROCEDIMIENTO EDITAR DEPARTAMENTO
CREATE OR REPLACE PROCEDURE EDITAR_DEPARTAMENTO
(DEP_ID IN INT, DEP_NOMBRE IN VARCHAR(50), PAI_ID IN INT )
AS 
BEGIN
update LA_DEPARTAMENTO set DEP_NOMBRE = DEP_NOMBRE , PAI_ID = PAI_ID  where  DEP_ID = DEP_ID ;
END;

--PROCEDURE PARA BORRAR UN DEPARTAMENTO POR ID
CREATE OR REPLACE PROCEDURE DELETE_DEPARTAMENTO
(
    DEP_ID IN INT
)
AS
BEGIN
    DELETE LA_DEPARTAMENTO WHERE DEP_ID = DEP_ID;
END;

EXECUTE INSERTA_DEPARTAMENTO('GUATEALA', 1)
EXECUTE INSERTA_DEPARTAMENTO('ALTA VERAPAZ', 1)
EXECUTE INSERTA_DEPARTAMENTO('CHIQUIMULA', 1)

EXECUTE EDITAR_DEPARTAMENTO(3, 'DF', 3)

EXECUTE DELETE_DEPARTAMENTO(3)

--CREO LA TABLA CIUDAD
CREATE TABLE LA_CIUDAD ( 
CIU_ID INT NOT NULL,
CUI_NOMBRE VARCHAR(50) NOT NULL,
DEP_ID INT NOT NULL,
PAI_ID INT NOT NULL,
CONSTRAINT LA_CIUDAD PRIMARY KEY (CIU_ID),
FOREIGN KEY (DEP_ID) REFERENCES  LA_DEPARTAMENTO(DEP_ID),
FOREIGN KEY (PAI_ID) REFERENCES  LA_PAIS(PAI_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_CIUDAD
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR CIUDAD
CREATE OR REPLACE PROCEDURE INSERTA_CIUDAD
(CUI_NOMBRE VARCHAR(50), DEP_ID INT, PAI_ID INT)
AS 
BEGIN
INSERT INTO LA_CIUDAD VALUES (AUTOINCREMENTABLE_CIUDAD.nextval, CUI_NOMBRE, DEP_ID, PAI_ID );
END;

--PROCEDIMIENTO EDITAR CIUDAD
CREATE OR REPLACE PROCEDURE EDITAR_CIUDAD
(CIU_ID IN INT, CUI_NOMBRE IN VARCHAR(50), DEP_ID INT, PAI_ID INT)
AS 
BEGIN
update LA_CIUDAD set CUI_NOMBRE = CUI_NOMBRE , DEP_ID = DEP_ID, PAI_ID=PAI_ID  where  CIU_ID = CIU_ID ;
END;

--PROCEDURE PARA BORRAR UN CIUDAD POR ID
CREATE OR REPLACE PROCEDURE DELETE_CIUDAD
(
    CIU_ID IN INT
)
AS
BEGIN
    DELETE LA_CIUDAD WHERE CIU_ID = CIU_ID;
END;

EXECUTE INSERTA_CIUDAD ('VILLA NUEVA', 1,1)
EXECUTE INSERTA_CIUDAD ('AMATITLAN', 1,1)
EXECUTE INSERTA_CIUDAD ('S', 1,1)

--CREO TABLA ROL
CREATE TABLE LA_ROL (
ROL_ID INT NOT NULL,
ROL_NOMBRE VARCHAR(50) NOT NULL,
CONSTRAINT LA_ROL PRIMARY KEY (ROL_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_ROL
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR ROL
CREATE OR REPLACE PROCEDURE INSERTA_ROL
(ROL_NOMBRE VARCHAR(50))
AS 
BEGIN
INSERT INTO LA_ROL VALUES (AUTOINCREMENTABLE_ROL.nextval, ROL_NOMBRE);
END;

--PROCEDIMIENTO EDITAR ROL
CREATE OR REPLACE PROCEDURE EDITAR_CIUDAD
(ROL_ID IN INT, ROL_NOMBRE IN VARCHAR(50))
AS 
BEGIN
update LA_ROL set ROL_NOMBRE = ROL_NOMBRE where  ROL_ID = ROL_ID ;
END;

--PROCEDURE PARA BORRAR UN ROL POR ID
CREATE OR REPLACE PROCEDURE DELETE_ROL
(
    ROL_ID IN INT
)
AS
BEGIN
    DELETE LA_ROL WHERE ROL_ID = ROL_ID;
END;

EXECUTE INSERTA_ROL ('EMPLEADO')
EXECUTE INSERTA_ROL ('ADMINISTRADOR')
EXECUTE INSERTA_ROL ('CLIENTE')

--CREO TABLA TIPO_DOCUMENTO
CREATE TABLE LA_TIPO_DOCUMENTO (
TPDOC_ID INT NOT NULL,
TPDOC_NOMBRE VARCHAR(50) NOT NULL,
TPDOC_ESTADO INT NOT NULL, --1 ACTIVO / 2 INACTIVO
TPDOC_MOVIMIENTO VARCHAR(50) NOT NULL, -- S SALIDA / E ENTRADA
CONSTRAINT LA_TIPO_DOCUMENTO PRIMARY KEY (TPDOC_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_TIPO_DOCUMENTO
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR TIPO_DOCUMENTO
CREATE OR REPLACE PROCEDURE INSERTA_TIPO_DOCUMENTO
(TPDOC_NOMBRE VARCHAR(50), TPDOC_ESTADO INT, TPDOC_MOVIMIENTO VARCHAR(50))
AS 
BEGIN
INSERT INTO LA_TIPO_DOCUMENTO VALUES (AUTOINCREMENTABLE_ROL.nextval, TPDOC_NOMBRE, TPDOC_ESTADO, TPDOC_MOVIMIENTO);
END;

--PROCEDIMIENTO EDITAR TIPO_DOCUMENTO
CREATE OR REPLACE PROCEDURE EDITAR_TIPO_DOCUMENTO
( TPDOC_ID IN INT, TPDOC_NOMBRE IN VARCHAR(50), TPDOC_ESTADO IN INT, TPDOC_MOVIMIENTO IN VARCHAR(50))
AS 
BEGIN
update LA_TIPO_DOCUMENTO set TPDOC_NOMBRE=TPDOC_NOMBRE, TPDOC_ESTADO =TPDOC_ESTADO, TPDOC_MOVIMIENTO=TPDOC_MOVIMIENTO where TPDOC_ID = TPDOC_ID ;
END;

--PROCEDURE PARA BORRAR UN TIPO_DOCUMENTO POR ID
CREATE OR REPLACE PROCEDURE DELETE_TIPO_DOCUMENTO
(
    TPDOC_ID IN INT
)
AS
BEGIN
    DELETE LA_TIPO_DOCUMENTO WHERE TPDOC_ID = TPDOC_ID;
END;

EXECUTE INSERTA_TIPO_DOCUMENTO ('FACTURA')
EXECUTE INSERTA_TIPO_DOCUMENTO ('ABONO')
EXECUTE INSERTA_TIPO_DOCUMENTO ('TRASLADOS')

--CREO TABLA BANCOS
CREATE TABLE LA_BANCOS (
BAN_ID INT NOT NULL,
BAN_NOMBRE VARCHAR(50) NOT NULL,
BAN_NO_CUENTA INT NOT NULL,
BAN_ESTADO INT NOT NULL, --1 ACTIVO / 2 INACTIVO
CONSTRAINT LA_BANCOS PRIMARY KEY (BAN_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_BANCOS
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR BANCOS
CREATE OR REPLACE PROCEDURE INSERTA_BANCOS
(BAN_NOMBRE VARCHAR(50), BAN_NO_CUENTA INT,BAN_ESTADO INT)
AS 
BEGIN
INSERT INTO LA_BANCOS VALUES (AUTOINCREMENTABLE_BANCOS.nextval, BAN_NOMBRE, BAN_NO_CUENTA, BAN_ESTADO);
END;

--PROCEDIMIENTO EDITAR BANCOS
CREATE OR REPLACE PROCEDURE EDITAR_BANCOS
( BAN_ID IN INT, BAN_NOMBRE IN VARCHAR(50), BAN_NO_CUENTA IN INT,BAN_ESTADO IN INT)
AS 
BEGIN
update LA_BANCOS set BAN_NOMBRE=BAN_NOMBRE, BAN_NO_CUENTA =BAN_NO_CUENTA, BAN_ESTADO=BAN_ESTADO where BAN_ID = BAN_ID ;
END;

--PROCEDURE PARA BORRAR UN BANCOS POR ID
CREATE OR REPLACE PROCEDURE DELETE_BANCOS
(
    BAN_ID IN INT
)
AS
BEGIN
    DELETE LA_BANCOS WHERE BAN_ID = BAN_ID;
END;

EXECUTE INSERTA_BANCOS ('BI', 123456789, 1)
EXECUTE INSERTA_BANCOS ('BAN RURAL', 1082984756, 1)
EXECUTE INSERTA_BANCOS ('BAM', 003918273, 1)

--CREO TABLA TIPO_PAGO
CREATE TABLE LA_TIPO_PAGO (
TP_ID INT NOT NULL,
TP_NOMBRE VARCHAR(50) NOT NULL,
TP_ESTADO INT NOT NULL, --1 ACTIVO / 2 INACTIVO
CONSTRAINT LA_TIPO_PAGO PRIMARY KEY (TP_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_TIPO_PAGO
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;


--PROCEDIMIENTO INSERTAR TIPO_PAGO
CREATE OR REPLACE PROCEDURE INSERTA_TIPO_PAGO
(TP_NOMBRE VARCHAR(50), TP_ESTADO INT)
AS 
BEGIN
INSERT INTO LA_TIPO_PAGO VALUES (AUTOINCREMENTABLE_TIPO_PAGO.nextval, TP_NOMBRE, TP_ESTADO);
END;

--PROCEDIMIENTO EDITAR TIPO_PAGO
CREATE OR REPLACE PROCEDURE EDITAR_TIPO_PAGO
(TP_ID IN INT, TP_NOMBRE IN VARCHAR(50), TP_ESTADO IN INT)
AS 
BEGIN
update LA_TIPO_PAGO set TP_NOMBRE = TP_NOMBRE, TP_ESTADO = TP_ESTADO where TP_ID = TP_ID ;
END;

--PROCEDURE PARA BORRAR UN TIPO_PAGO POR ID
CREATE OR REPLACE PROCEDURE DELETE_TIPO_PAGO
(
    TP_ID IN INT
)
AS
BEGIN
    DELETE LA_TIPO_PAGO WHERE TP_ID = TP_ID;
END;

EXECUTE INSERTA_TIPO_PAGO ('TARJETA', 1)
EXECUTE INSERTA_TIPO_PAGO ('EFECTIVO', 1)
EXECUTE INSERTA_TIPO_PAGO ('PAGARE', 1)

--CREO TABLA DIMENSIONES
--SOLO USAR EN CENTIMETROS PARA NO USAR .
CREATE TABLE LA_DIMENCIONES(
DIM_ID INT NOT NULL,
DIM_ANCHO INT NOT NULL,
DIM_LARGO INT NOT NULL,
DIM_ALTO INT NOT NULL,
DIM_PROFUNDIDAD INT NOT NULL,
DIM_MEDIDA VARCHAR(50) NOT NULL,
CONSTRAINT LA_DIMENCIONES PRIMARY KEY (DIM_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_DIMENCIONES
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR DIMENCIONES
CREATE OR REPLACE PROCEDURE INSERTA_DIMENCIONES
(DIM_ANCHO INT, DIM_LARGO INT, DIM_PROFUNDIDAD INT, DIM_MEDIDA VARCHAR(50), DIM_ALTO INT)
AS 
BEGIN
INSERT INTO LA_DIMENCIONES VALUES (AUTOINCREMENTABLE_DIMENCIONES.nextval, DIM_ANCHO, DIM_LARGO, DIM_ALTO, DIM_PROFUNDIDAD, DIM_MEDIDA);
END;

--PROCEDIMIENTO EDITAR DIMENSIONES
CREATE OR REPLACE PROCEDURE EDITAR_DIMENSIONES
(DIM_ID IN INT, DIM_ANCHO IN INT, DIM_LARGO IN INT, DIM_PROFUNDIDAD IN INT,DIM_ALTO IN INT, DIM_MEDIDA IN VARCHAR(50))
AS 
BEGIN
update LA_DIMENCIONES set DIM_ANCHO = DIM_ANCHO, DIM_LARGO = DIM_LARGO, DIM_LARGO = DIM_LARGO, DIM_PROFUNDIDAD = DIM_PROFUNDIDAD, DIM_ALTO = DIM_ALTO, DIM_MEDIDA = DIM_MEDIDA where DIM_ID = DIM_ID ;
END;

--PROCEDURE PARA BORRAR UN DIMENSIONES POR ID
CREATE OR REPLACE PROCEDURE DELETE_DIMENSIONES
(
    DIM_ID IN INT
)
AS
BEGIN
    DELETE LA_DIMENCIONES WHERE DIM_ID = DIM_ID;
END;

EXECUTE INSERTA_DIMENCIONES (130, 200, 30, 40, 'CENTIMETORS')
EXECUTE INSERTA_DIMENCIONES (200, 200, 100,50, 'CENTIMETORS')
EXECUTE INSERTA_DIMENCIONES (30, 40, 100, 40, 'CENTIMETORS')

--CREO TABLA DIRECCION
CREATE TABLE LA_DIRECCION (
DIR_ID INT NOT NULL,
PAI_ID INT NOT NULL,
CIU_ID INT NOT NULL,
DEP_ID INT NOT NULL,
CONSTRAINT LA_DIRECCION PRIMARY KEY (DIR_ID),
FOREIGN KEY (PAI_ID) REFERENCES  LA_PAIS(PAI_ID),
FOREIGN KEY (CIU_ID) REFERENCES  LA_CIUDAD(CIU_ID),
FOREIGN KEY (DEP_ID) REFERENCES  LA_DEPARTAMENTO(DEP_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_DIRECCION
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR DIRECCION
CREATE OR REPLACE PROCEDURE INSERTA_DIRECCION
( PAI_ID INT , CIU_ID INT , DEP_ID INT)
AS 
BEGIN
INSERT INTO LA_DIRECCION VALUES (AUTOINCREMENTABLE_DIRECCION.nextval, PAI_ID, CIU_ID, DEP_ID);
END;

--PROCEDIMIENTO EDITAR DIRECCION
CREATE OR REPLACE PROCEDURE EDITAR_DIRECCION
( DIR_ID IN INT, PAI_ID IN INT , CIU_ID IN INT , DEP_ID IN INT)
AS 
BEGIN
update LA_DIRECCION set DIR_ID = DIR_ID, PAI_ID = PAI_ID, CIU_ID = CIU_ID, DEP_ID = DEP_ID where DIR_ID = DIR_ID ;
END;

--PROCEDURE PARA BORRAR UN DIRECCION POR ID
CREATE OR REPLACE PROCEDURE DELETE_DIRECCION
(
    DIR_ID IN INT
)
AS
BEGIN
    DELETE LA_DIRECCION WHERE DIR_ID = DIR_ID;
END;

EXECUTE INSERTA_DIRECCION ( 1,1,1)

--CREO TABLA BODEGA
CREATE TABLE LA_BODEGA(
BOD_ID INT NOT NULL,
BOD_NOMBRE VARCHAR(50) NOT NULL,
BOD_DETALLE_DIRECCION VARCHAR(50) NOT NULL,
BOD_TEL INT,
DIR_ID INT NOT NULL,
CONSTRAINT LA_BODEGA PRIMARY KEY (BOD_ID),
FOREIGN KEY (DIR_ID) REFERENCES  LA_DIRECCION(DIR_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_BODEGA
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR BODEGA
CREATE OR REPLACE PROCEDURE INSERTA_BODEGA
(BOD_NOMBRE VARCHAR(50), BOD_DETALLE_DIRECCION VARCHAR(50), BOD_TEL INT, DIR_ID INT )
AS 
BEGIN
INSERT INTO LA_BODEGA VALUES (AUTOINCREMENTABLE_BODEGA.nextval, BOD_NOMBRE, BOD_DETALLE_DIRECCION, BOD_TEL, DIR_ID );
END;

--PROCEDIMIENTO EDITAR BODEGA
CREATE OR REPLACE PROCEDURE EDITAR_BODEGA
(BOD_ID IN INT, BOD_NOMBRE IN VARCHAR(50), BOD_DETALLE_DIRECCION IN VARCHAR(50), BOD_TEL IN INT, DIR_ID IN INT)
AS 
BEGIN
update LA_BODEGA set BOD_NOMBRE = BOD_NOMBRE, BOD_DETALLE_DIRECCION = BOD_DETALLE_DIRECCION, BOD_TEL = BOD_TEL, DIR_ID = DIR_ID WHERE  BOD_ID = BOD_ID ;
END;

--PROCEDURE PARA BORRAR UN BODEGA POR ID
CREATE OR REPLACE PROCEDURE DELETE_BODEGA
(
    BOD_ID IN INT
)
AS
BEGIN
    DELETE LA_BODEGA WHERE BOD_ID = BOD_ID;
END;

EXECUTE INSERTA_BODEGA ('BODEGA1', 'ESTA PUEDE SER OBSERVACIONES', 66333708, 1)
EXECUTE INSERTA_BODEGA ('BODEGA2', '5TA AV CALLE LOS OLIVOS', 44412584, 1)

--CREO TABLA PAGO
CREATE TABLE LA_PAGO(
PAG_ID INT NOT NULL,
PAG_CUENTA_QUE_DEPOSITA VARCHAR(50),
PAG_FECH date,
BAN_ID INT,
PAG_CANTIDAD INT NOT NULL,
TP_ID INT NOT NULL,
CONSTRAINT LA_PAGO PRIMARY KEY (PAG_ID),
FOREIGN KEY (TP_ID) REFERENCES  LA_TIPO_PAGO(TP_ID),
FOREIGN KEY (BAN_ID) REFERENCES  LA_BANCOS(BAN_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_PAGO
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR PAGO
CREATE OR REPLACE PROCEDURE INSERTA_PAGO
(PAG_CUENTA_QUE_DEPOSITA VARCHAR(50),PAG_FECH date, BAN_ID INT,PAG_CANTIDAD INT,TP_ID INT )
AS 
BEGIN
INSERT INTO LA_PAGO VALUES (AUTOINCREMENTABLE_PAGO.nextval, PAG_CUENTA_QUE_DEPOSITA,PAG_FECH, BAN_ID,PAG_CANTIDAD INT,TP_ID INT);
END;

--PROCEDIMIENTO EDITAR PAGO
CREATE OR REPLACE PROCEDURE EDITAR_PAGO
(PAG_ID IN INT, PAG_CUENTA_QUE_DEPOSITA IN VARCHAR(50),PAG_FECH IN date, BAN_ID IN INT,PAG_CANTIDAD IN INT,TP_ID IN INT)
AS 
BEGIN
update LA_PAGO set PAG_CUENTA_QUE_DEPOSITA = PAG_CUENTA_QUE_DEPOSITA, PAG_FECH = PAG_FECH, BAN_ID = BAN_ID, PAG_CANTIDAD = PAG_CANTIDAD, TP_ID = TP_ID WHERE  PAG_ID = PAG_ID ;
END;

--PROCEDURE PARA BORRAR UN PAGO POR ID
CREATE OR REPLACE PROCEDURE DELETE_PAGO
(
    PAG_ID IN INT
)
AS
BEGIN
    DELETE LA_PAGO WHERE PAG_ID = PAG_ID;
END;

EXECUTE INSERTA_PAGO (124356879, '2022-03-14' , 1, 1500, 1)
EXECUTE INSERTA_PAGO (000000000, '2022-03-14' , 2, 2000, 2)

--CREO TABLA USUARIOS
CREATE TABLE LA_USUARIO(
USU_NUMERO_DE_DOCUMENTO INT NOT NULL,
USU_NOMBRE_COMPLETO VARCHAR(50)NOT NULL,
USU_TIPO_DOC INT,
USU_TELEFONO_RECIDENCIA INT,
USU_TELEFONO_MOVIL INT,
DIR_ID INT NOT NULL,
USU_DIRECCION_EXACTA VARCHAR(50)NOT NULL,
USU_EMAIL INT,
ROL_ID INT NOT NULL,
USU_ESTADO INT NOT NULL,--1 ACTIVO /0 INACTIVO
CONSTRAINT LA_USUARIO PRIMARY KEY (USU_NUMERO_DE_DOCUMENTO),
FOREIGN KEY (DIR_ID) REFERENCES  LA_DIRECCION(DIR_ID),
FOREIGN KEY (ROL_ID) REFERENCES  LA_ROL(ROL_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_USUARIO
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;


--PROCEDIMIENTO INSERTAR USUARIOS
CREATE OR REPLACE PROCEDURE INSERTA_USUARIOS
(USU_NUMERO_DE_DOCUMENTO INT, USU_NOMBRE_COMPLETO VARCHAR(50),USU_TIPO_DOC INT,USU_TELEFONO_RECIDENCIA INT,USU_TELEFONO_MOVIL INT,
DIR_ID INT, USU_DIRECCION_EXACTA VARCHAR(50),USU_EMAIL INT, ROL_ID INT ,USU_ESTADO INT)
AS 
BEGIN
INSERT INTO LA_USUARIO VALUES (USU_NUMERO_DE_DOCUMENTO, USU_NOMBRE_COMPLETO, USU_TIPO_DOC, USU_TELEFONO_RECIDENCIA, USU_TELEFONO_MOVIL,
DIR_ID, USU_DIRECCION_EXACTA, USU_EMAIL, ROL_ID, USU_ESTADO);
END;


--PROCEDIMIENTO EDITAR USUARIOS
CREATE OR REPLACE PROCEDURE EDITAR_USUARIO
(USU_NUMERO_DE_DOCUMENTO IN INT, USU_NOMBRE_COMPLETO IN VARCHAR(50),USU_TIPO_DOC IN INT,USU_TELEFONO_RECIDENCIA IN INT,
USU_TELEFONO_MOVIL IN INT,DIR_ID IN INT, USU_DIRECCION_EXACTA IN VARCHAR(50),USU_EMAIL IN INT, ROL_ID IN INT ,USU_ESTADO IN INT)
AS 
BEGIN
update LA_USUARIO set USU_NOMBRE_COMPLETO = USU_NOMBRE_COMPLETO, USU_TIPO_DOC = USU_TIPO_DOC, USU_TELEFONO_RECIDENCIA = USU_TELEFONO_RECIDENCIA, 
USU_TELEFONO_MOVIL = USU_TELEFONO_MOVIL, DIR_ID = DIR_ID, USU_DIRECCION_EXACTA = USU_DIRECCION_EXACTA, USU_EMAIL = USU_EMAIL, ROL_ID = ROL_ID,
USU_ESTADO = USU_ESTADO WHERE  USU_NUMERO_DE_DOCUMENTO = USU_NUMERO_DE_DOCUMENTO ;
END;


 --PROCEDURE PARA BORRAR UN CLIENTE POR ID (DELETE WHERE ID)
CREATE OR REPLACE PROCEDURE DELETE_CLIENTE
(
    id_usuario IN INT
)
AS
BEGIN
    DELETE LA_Usuario WHERE id_usu_numerodocumento = id_usuario;
END;

EXECUTE INSERTA_USUARIO(3011490030101, 'Juan David Gomez Bukele','DPI',66254545,35458888,1,'Ciudad de Guatemala','juanbukele@outlook.es',1,1);
EXECUTE INSERTA_USUARIO(1928763276487, 'Karla Julisa Ayala Cabrera','pasaporte',66254545,35458888,1,'VILLANUEVA','KJULISAC@outlook.es',2,1);


--CREO TABLA ENCABEZADO DOCUMENTO
CREATE TABLE LA_ENCABEZADO_DOCUMENTO(
EDOC_ID INT NOT NULL,
USU_NUMERO_DE_DOCUMENTO INT NOT NULL,
PAG_ID INT NOT NULL,
TPDOC_ID INT NOT NULL,
EDOC_ESTADO INT NOT NULL,--1 ACTIVO /0 INACTIVO}
EDOC_FECHA DATE NOT NULL,
CONSTRAINT LA_ENCABEZADO_DOCUMENTO PRIMARY KEY (EDOC_ID),
FOREIGN KEY (USU_NUMERO_DE_DOCUMENTO) REFERENCES  LA_USUARIO(USU_NUMERO_DE_DOCUMENTO),
FOREIGN KEY (PAG_ID) REFERENCES  LA_PAGO(PAG_ID),
FOREIGN KEY (TPDOC_ID) REFERENCES  LA_TIPO_DOCUMENTO(TPDOC_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_ENCABEZADO_DOCUMENTO
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR ENCABEZADO DOCUMENTO
CREATE OR REPLACE PROCEDURE INSERTA_ENCABEZADO_DOCUMENTO
(USU_NUMERO_DE_DOCUMENTO INT, PAG_ID INT, TPDOC_ID INT, EDOC_ESTADO INT, EDOC_FECHA DATE)
AS 
BEGIN
INSERT INTO LA_ENCABEZADO_DOCUMENTO VALUES (AUTOINCREMENTABLE_ENCABEZADO_DOCUMENTO.nextval, USU_NUMERO_DE_DOCUMENTO, PAG_ID, TPDOC_ID, EDOC_ESTADO, EDOC_FECHA);
END;

--PROCEDIMIENTO EDITAR ENCABEZADO DOCUMENTO
CREATE OR REPLACE PROCEDURE EDITAR_ENCABEZADO_DOCUMENTO
(EDOC_ID IN INT, USU_NUMERO_DE_DOCUMENTO IN INT, PAG_ID IN INT, TPDOC_ID IN INT, EDOC_ESTADO IN INT, EDOC_FECHA IN DATE)
AS 
BEGIN
update LA_ENCABEZADO_DOCUMENTO set USU_NUMERO_DE_DOCUMENTO = USU_NUMERO_DE_DOCUMENTO, PAG_ID = PAG_ID, TPDOC_ID = TPDOC_ID, EDOC_ESTADO = EDOC_ESTADO, EDOC_FECHA = EDOC_FECHA WHERE  EDOC_ID = EDOC_ID ;
END;

--PROCEDURE PARA BORRAR UN DOCUMENTO POR ID
CREATE OR REPLACE PROCEDURE DELETE_ENCABEZADO_DOCUMENTO
(
    EDOC_ID IN INT
)
AS
BEGIN
    DELETE LA_ENCABEZADO_DOCUMENTO WHERE EDOC_ID = EDOC_ID;
END;

EXECUTE INSERTA_ENCABEZADO_DOCUMENTO(1, 1, 1, 1, '2022-01-20')

--CREO TABLA PRODUCTO
CREATE TABLE LA_PRODUCTO(
PRO_ID INT NOT NULL,
PRO_NOMBRE VARCHAR(50) NOT NULL,
PRO_DESCRIPCION VARCHAR(50) NOT NULL,
PRO_MATERIAL VARCHAR(50) NOT NULL,
DIM_ID INT NOT NULL,
BOD_ID INT NOT NULL,
DPRO_PRECIO INT NOT NULL,
DPRO_EXISTENCIA INT NOT NULL,
PRO_TIPO VARCHAR(50) NOT NULL,--INTERIOR EXTERIOR
PRO_ESTADO INT NOT NULL,--1 ACTIVO /0 INACTIVO}
CONSTRAINT LA_PRODUCTO PRIMARY KEY (PRO_ID),
FOREIGN KEY (DIM_ID) REFERENCES  LA_DIMENCIONES(DIM_ID)
FOREIGN KEY (BOD_ID) REFERENCES  LA_BODEGA(BOD_ID),
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_PRODUCTO
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR PRODUCTO
CREATE OR REPLACE PROCEDURE INSERTA_PRODUCTO
(PRO_NOMBRE VARCHAR(50), PRO_DESCRIPCION VARCHAR(50), PRO_MATERIAL VARCHAR(50), DIM_ID INT, BOD_ID INT, DPRO_PRECIO INT, DPRO_EXISTENCIA INT, PRO_TIPO VARCHAR(50), PRO_ESTADO INT)
AS 
BEGIN
INSERT INTO LA_PRODUCTO VALUES (AUTOINCREMENTABLE_PRODUCTO.nextval,PRO_NOMBRE, PRO_DESCRIPCION, PRO_MATERIAL, DIM_ID, BOD_ID, DPRO_PRECIO, DPRO_EXISTENCIA, PRO_TIPO, PRO_ESTADO);
END;

--PROCEDIMIENTO EDITAR PRODUCTO
CREATE OR REPLACE PROCEDURE EDITAR_ENCABEZADO_DOCUMENTO
(PRO_ID IN INT , PRO_NOMBRE IN VARCHAR(50), PRO_DESCRIPCION IN VARCHAR(50), PRO_MATERIAL IN VARCHAR(50), DIM_ID IN INT, BOD_ID IN INT, DPRO_PRECIO IN INT, 
DPRO_EXISTENCIA IN INT, PRO_TIPO IN VARCHAR(50), PRO_ESTADO IN INT)
 AS 
BEGIN
update LA_PRODUCTO set PRO_NOMBRE = PRO_NOMBRE, PRO_DESCRIPCION = PRO_DESCRIPCION, PRO_MATERIAL = PRO_MATERIAL, DIM_ID = DIM_ID, 
BOD_ID = BOD_ID, DPRO_PRECIO = DPRO_PRECIO, DPRO_EXISTENCIA = DPRO_EXISTENCIA, PRO_TIPO = PRO_TIPO, PRO_ESTADO = PRO_ESTADO WHERE  PRO_ID = PRO_ID ;
END;

--PROCEDURE PARA BORRAR UN PRODUCTO POR ID
CREATE OR REPLACE PROCEDURE DELETE_PRODUCTO
(
    PRO_ID IN INT
)
AS
BEGIN
    DELETE LA_PRODUCTO WHERE PRO_ID = PRO_ID;
END;

EXECUTE INSERTA_PRODUCTO ('MESA', 'MESA DE CAOBA', 'Madera', 2, 1, 500, 3, 'INTERIOR', 1)
EXECUTE INSERTA_PRODUCTO ('silla', 'silla de mtela', 'Metal', 1, 1, 200, 3, 'EXTERIOR', 1)


--CREO TABLA DETALLE DOCUMENTO
CREATE TABLE LA_DETALLE_DOCUMENTO(
DDOC_ID INT NOT NULL,
PRO_ID INT NOT NULL,
EDOC_ID INT NOT NULL,
DDOC_CATIDAD INT NOT NULL,
DDOC_PRECIO INT NOT NULL,
DDOC_ESTADO INT NOT NULL,--1 ACTIVO /0 INACTIVO}
CONSTRAINT LA_DETALLE_DOCUMENTO PRIMARY KEY (DDOC_ID),
FOREIGN KEY (PRO_ID) REFERENCES  LA_PRODUCTO(PRO_ID),
FOREIGN KEY (EDOC_ID) REFERENCES  LA_ENCABEZADO_DOCUMENTO(EDOC_ID)
);

--CODIGO QUE HACE EL PRIMARY KEY AUTO INCREMENTABLE (SE HACE UNA POR TABLA)
CREATE SEQUENCE AUTOINCREMENTABLE_DETALLE_DOCUMENTO
--INICIA EN 1
START WITH 1
--ICREMENTA 1
INCREMENT BY 1;

--PROCEDIMIENTO INSERTAR DETALLE DOCUMENTO
CREATE OR REPLACE PROCEDURE INSERTA_DETALLE_DOCUMENTO
(PRO_ID INT, EDOC_ID, DDOC_CATIDAD INT, DDOC_PRECIO INT, DDOC_ESTADO INT)
AS 
BEGIN
INSERT INTO LA_DETALLE_DOCUMENTO VALUES (AUTOINCREMENTABLE_DETALLE_DOCUMENTO.nextval,PRO_ID, EDOC_ID, DDOC_CATIDAD, DDOC_PRECIO, DDOC_ESTADO);
END;

--PROCEDIMIENTO EDITAR DETALLE DOCUMENTO
CREATE OR REPLACE PROCEDURE EDITAR_DETALLE_DOCUMENTO
(DDOC_ID IN INT, PRO_ID IN INT, EDOC_ID, DDOC_CATIDAD IN INT, DDOC_PRECIO IN INT, DDOC_ESTADO IN INT)
AS 
BEGIN
update LA_DETALLE_DOCUMENTO set PRO_ID = PRO_ID, EDOC_ID = EDOC_ID, DDOC_CATIDAD = DDOC_CATIDAD, DDOC_PRECIO = DDOC_PRECIO, DDOC_ESTADO = DDOC_ESTADO WHERE  DDOC_ID = DDOC_ID ;
END;

--PROCEDURE PARA BORRAR UN DETALLE_DOCUMENTO  POR ID
CREATE OR REPLACE PROCEDURE DELETE_DETALLE_DOCUMENTO 
(
    DDOC_ID IN INT
)
AS
BEGIN
    DELETE LA_DETALLE_DOCUMENTO WHERE DDOC_ID = DDOC_ID;
END;

EXECUTE INSERTA_DETALLE_DOCUMENTO (1,1, 2, 600, 1)
EXECUTE INSERTA_DETALLE_DOCUMENTO (2,1, 12, 400, 1)





--NOTA
--PARA EL SIGUIENTE PASO LO IMPORTANTE ES QUE TU USUARIO TENGA PERMISOS DBA
---CREO TABLA DE IMAGENES
CREATE TABLE LA_IMAGENES(
IMG_ID INT,
IMGEN BLOB DEFAULT EMPTY_BLOB()
);

--CREO UN DIRECTORIO
-- ESTE DEBE SER CREADO CON EL  NOMBRE IMAGENES PROYECTO EN EL ESCRITORIO, LUEGO COPIA LA RUTA
CREATE OR REPLACE DIRECTORY IMAGENES AS 'C:\Users\USUARIO\Desktop\IMAGENES PROYECTO';

--INICIA INGRESO

DECLARE 
V_TEMP BLOB;
V_BFILE BFILE;
V_NOMBRE_FOTO VARCHAR (20);
BEGIN

-- CREO EL INSERT
INSERT INTO LA_IMAGENES VALUES (2, EMPTY_BLOB()) RETURNING FOTO INTO V_TEMP;

V_NOMBRE_FOTO := '1.PNG';

V_BFILE := BFILENAME('OBJETOS_LOB', V_NOMBRE_FOTO);
DBMS_LOB.OPEN(V_BFILE, DBMS_LOB.LOB_READONLY);
DBMS_LOB.LOADFROMFILE(V_TEMP, V_BFILE, DBMS_LOB.GETLENGTH(V_BFILE));
DBMS_LOB.CLOSE(V_BFILE);
COMMIT;
END;


